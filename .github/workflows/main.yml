name: CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            options: "-DVVCTRE_USE_BUNDLED_SDL2=ON -DUSE_DISCORD_PRESENCE=ON -DENABLE_MF=ON -DENABLE_FFMPEG_VIDEO_DUMPER=ON"
          - os: ubuntu-latest
            options: "-DUSE_DISCORD_PRESENCE=ON -DENABLE_FFMPEG_VIDEO_DUMPER=ON"
    steps:
    - name: Install Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev libavcodec-dev libavformat-dev libswscale-dev
    - uses: actions/checkout@v1
    - run: git submodule update --init --recursive
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake .. $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release ${{matrix.options}}
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config Release
    - name: Test
      working-directory: ${{runner.workspace}}/build
      run: ctest -C Release
    - name: Prepare to upload
      shell: bash
      run: |
        #if [ "$RUNNER_OS" == "Linux" ]; then
        #  rm $GITHUB_WORKSPACE/build/bin/tests
        #  cp $GITHUB_WORKSPACE/license.txt $GITHUB_WORKSPACE/build/bin
        #elif [ "$RUNNER_OS" == "Windows" ]; then
        #  rm $GITHUB_WORKSPACE/build/bin/Release/tests.exe
        #  rm $GITHUB_WORKSPACE/build/bin/Release/*.pdb
        #  cp $GITHUB_WORKSPACE/license.txt $GITHUB_WORKSPACE/build/bin/Release
        #fi
        echo test
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: vvctre-${{matrix.os}}
        path: build/bin
